

		*** Atoi ***

Problem Description
There are certain questions where the interviewer would intentionally frame the question vague.

The expectation is that you will ask the correct set of clarifications or state your assumptions before you jump into coding.

Implement atoi to convert a string to an integer.

Example :

Input : "9 2704"
Output : 9
Note: There might be multiple corner cases here. Clarify all your doubts using “See Expected Output”.

Questions:

Q1. Does string contain whitespace characters before the number?

A. Yes

Q2. Can the string have garbage characters after the number?

A. Yes. Ignore it.

Q3. If no numeric character is found before encountering garbage characters, what should I do?

A. Return 0.

Q4. What if the integer overflows?

A. Return INT_MAX if the number is positive, INT_MIN otherwise.

Warning : DO NOT USE LIBRARY FUNCTION FOR ATOI.

//======================  Solution  =================================
public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int atoi(final String A) {
        int index = 0;
        int result = 0;
        int sign = 1; // Default sign is positive

        // Step 1: Skip leading whitespace
        while (index < A.length() && A.charAt(index) == ' ') {
            index++;
        }

        // Step 2: Check for sign
        if (index < A.length() && (A.charAt(index) == '+' || A.charAt(index) == '-')) {
            sign = (A.charAt(index) == '-') ? -1 : 1;
            index++;
        }

        // Step 3: Process digits
        while (index < A.length() && Character.isDigit(A.charAt(index))) {
            int digit = A.charAt(index) - '0'; // Convert char to int
            
            // Step 4: Check for overflow
            if (result > (Integer.MAX_VALUE - digit) / 10) {
                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            }
            result = result * 10 + digit; // Build the result
            index++;
        }

        // Step 5: Return the result with the sign applied
        return sign * result;
    }
}




 