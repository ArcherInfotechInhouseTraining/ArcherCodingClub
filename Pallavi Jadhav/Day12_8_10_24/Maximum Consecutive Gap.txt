

		***  Maximum Consecutive Gap***

Problem Description

	

Given an unsorted array, find the maximum difference between the successive elements in its sorted form.
Return 0 if the array contains less than 2 elements.
You may assume that all the elements in the array are non-negative integers and fit in the 32-bit signed integer range.
You may also assume that the difference will not overflow.
Try to solve it in linear time/space



Problem Constraints
1 <= |A| <= 106
1 <= Ai <= 109


Input Format
The first argument is an integer array A.


Output Format
Return an integer representing maximum difference between the successive elements in array A.


Example Input
A = [1, 10, 5]


Example Output
5


Example Explanation
The maximum difference is between 5 and 10, which is 5.

//======================  Solution  =================================

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maximumGap(final List<Integer> A) {
        
        
        
        if (A == null || A.size() < 2) {
            return 0;
        }

        int n = A.size();
        int minVal = Collections.min(A);
        int maxVal = Collections.max(A);

        // If all numbers are the same, return 0
        if (minVal == maxVal) {
            return 0;
        }

        // Bucket size and number of buckets
        int bucketSize = Math.max((maxVal - minVal) / (n - 1), 1);
        int bucketCount = (maxVal - minVal) / bucketSize + 1;

        // Create buckets for min and max values
        int[] bucketMin = new int[bucketCount];
        int[] bucketMax = new int[bucketCount];
        Arrays.fill(bucketMin, Integer.MAX_VALUE);
        Arrays.fill(bucketMax, Integer.MIN_VALUE);

        // Place every element in a bucket
        for (int num : A) {
            int bucketIndex = (num - minVal) / bucketSize;
            bucketMin[bucketIndex] = Math.min(bucketMin[bucketIndex], num);
            bucketMax[bucketIndex] = Math.max(bucketMax[bucketIndex], num);
        }

        // Calculate the maximum gap
        int maxGap = 0;
        int previousMax = minVal;

        for (int i = 0; i < bucketCount; i++) {
            // If the bucket is empty, continue
            if (bucketMin[i] == Integer.MAX_VALUE && bucketMax[i] == Integer.MIN_VALUE) {
                continue;
            }
            // Calculate the gap
            maxGap = Math.max(maxGap, bucketMin[i] - previousMax);
            previousMax = bucketMax[i];
        }

        return maxGap;
    }
}






///////////////////////////


 