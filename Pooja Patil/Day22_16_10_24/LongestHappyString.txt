 
***QUE****

A string s is called happy if it satisfies the following conditions:

s only contains the letters 'a', 'b', and 'c'.
s does not contain any of "aaa", "bbb", or "ccc" as a substring.
s contains at most a occurrences of the letter 'a'.
s contains at most b occurrences of the letter 'b'.
s contains at most c occurrences of the letter 'c'.
Given three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string "".

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: a = 1, b = 1, c = 7
Output: "ccaccbcc"
Explanation: "ccbccacc" would also be a correct answer.
Example 2:

Input: a = 7, b = 1, c = 0
Output: "aabaa"
Explanation: It is the only correct answer in this case.
 

Constraints:

0 <= a, b, c <= 100
a + b + c > 0


****SOLUTION****
class Solution {
    public String longestDiverseString(int a, int b, int c) {
        
           PriorityQueue<int[]> maxHeap = new PriorityQueue<>(new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o2[0] - o1[0];  // Compare by the first element (frequency) in descending order
            }
        });
        
        // Add the counts to the max-heap
        if (a > 0) maxHeap.offer(new int[]{a, 'a'});
        if (b > 0) maxHeap.offer(new int[]{b, 'b'});
        if (c > 0) maxHeap.offer(new int[]{c, 'c'});

        StringBuilder result = new StringBuilder();

        while (!maxHeap.isEmpty()) {
            // Get the character with the maximum frequency
            int[] current = maxHeap.poll();
            int freq = current[0];
            char letter = (char) current[1];

            // Check if we can add this letter
            if (result.length() >= 2 && result.charAt(result.length() - 1) == letter && result.charAt(result.length() - 2) == letter) {
                // If the last two characters are the same as the current letter, we need to get the next most frequent character
                if (maxHeap.isEmpty()) {
                    break; // If no more characters can be added, break
                }
                int[] next = maxHeap.poll();
                int nextFreq = next[0];
                char nextLetter = (char) next[1];

                // Add the next most frequent letter
                result.append(nextLetter);
                nextFreq--; // Decrease the count for next letter
                
                // If there are remaining counts for next letter, push it back into the heap
                if (nextFreq > 0) {
                    maxHeap.offer(new int[]{nextFreq, nextLetter});
                }

                // Push the current letter back into the heap
                maxHeap.offer(new int[]{freq, letter});
            } else {
                // If we can safely add the current letter
                result.append(letter);
                freq--; // Decrease the count for the current letter
                
                // If there are remaining counts for current letter, push it back into the heap
                if (freq > 0) {
                    maxHeap.offer(new int[]{freq, letter});
                }
            }
        }

        return result.toString();
    }
}