**QUE**
Given a string s, find the length of the longest 
substring
 without repeating characters.

 
Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

**SOLUTION**

class Solution {
    public int lengthOfLongestSubstring(String s) {

        int len=0, maxLength=0;

        Set<Character> charSet = new HashSet<>();

        if(s.length() == 0){
          
            return maxLength;
        }

        if(s.length() == 1){
            return maxLength=1;
        }

        for(int i=0; i<s.length(); i++){

            for(int j=i; j<s.length(); j++){

                if(!charSet.add( s.charAt(j) ) ){
                    len = charSet.size();
                    charSet.clear();
                    break;
                }
                charSet.add( s.charAt(j) );
            }
            
            if(len>maxLength){
                    maxLength = len;
                }
        }
        return maxLength;
    }
}