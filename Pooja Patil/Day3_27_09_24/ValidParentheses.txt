***QUE***
//LeetCode 
20. Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:


Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.


***SOLUTION***

bool isValid(char* s) {
    
    int i;
    char finaloutput[1000];
    int top;

    for(i=0;i<s[i]!='\0';i++);
    if(i%2 == 0)
    {
        for(i=0;s[i]!='\0';i++)
        {
            if( (s[i] == '(' || s[i] == '{' || s[i]== '[') && (s[i+1] != '(' || s[i+1]!='[' || s[i+1]!='{') )
            {
                top++;
                finaloutput[top] = s[i];
            }
            else
            {
                if( !(top<0) && ( (finaloutput[top] == '(' && s[i]==')' ) || (finaloutput[top] == '{'&& s[i]=='}' ) || (finaloutput[top]== '[' && s[i]==']' )))
                {
                    top--;
                }
                else
                {
                    return false;
                    break;
                }
            }
        }
        return true;
    }
    else
    {
        return false;
    }
}

