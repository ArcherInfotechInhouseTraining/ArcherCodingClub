Given an array arr[] with non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 
 

Examples:

Input: arr[] = [3,0,0,2,0,4]
Output: 10
Explanation: 3+3+1+3=10

Input: arr[] = [7,4,0,9]
Output: 10
Explanation:
Water trapped by above 
block of height 4 is 3 units and above 
block of height 0 is 7 units. So, the 
total unit of water trapped is 10 units.
Input: arr[] = [6,9,9]
Output: 0
Explanation:
No water will be trapped.
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)


Constraints:
3 < number of blocks < 106
0 < Ai < 108


=========================OUTPUT===============================


class Solution {

    // Function to find the trapped water between the blocks.
  public:
    long long trappingWater(vector<int> &arr) {
        // code here
        int n=arr.size();
        
        int start=0, end=n-1;
        int startmax=0,endmax=0;
        int water=0;
        
        while(start<=end)
        {
            if(arr[start]<arr[end])
            {
                if(arr[start]>=startmax)
                {
                    startmax=arr[start];
                }
                else
                {
                    water=water+startmax-arr[start];
                }
                start++;
            }
           
            else
            {
                if(arr[end]>=endmax)
                {
                    endmax=arr[end];
                }
                else
                {
                    water=water+endmax-arr[end];
                }
                end--;
            }
           
        }
        return water;
    }
};

