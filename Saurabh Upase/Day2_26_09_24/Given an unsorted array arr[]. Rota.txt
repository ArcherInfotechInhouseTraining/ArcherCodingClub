Given an unsorted array arr[]. Rotate the array to the left (counter-clockwise direction) by d steps, where d is a positive integer. Do the mentioned change in the array in place.

Note: Consider the array as circular.

Examples :

Input: arr[] = {1,2,3,4,5}, d = 2
Output: 3 4 5 1 2
Explanation: 1 2 3 4 5  when rotated by 2 elements, it becomes 3 4 5 1 2.
Input: arr[] = {2,4,6,8,10,12,14,16,18,20}, d = 3
Output: 8 10 12 14 16 18 20 2 4 6
Explanation: 2 4 6 8 10 12 14 16 18 20 when rotated by 3 elements, it becomes 8 10 12 14 16 18 20 2 4 6.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= arr.size(),d <= 105
0 <= arr[i] <= 105


OUTPUT: 

void reverse(int arr[] ,int start ,int end)
{
    int temp;
    while(start<=end)
    {
        temp=arr[start];
        arr[start]=arr[end];
        arr[end]=temp;
        start++;
        end--;
    }
}
// Function to rotate an array by d elements in counter-clockwise direction.
void rotateArr(int arr[], int n, int d) {
    
    d=d%n;
    
    reverse(arr,0,d-1);
    
    reverse(arr,d,n-1);
    
    reverse(arr,0,n-1);
    

    
}