Given an array arr of size n of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

Note: Answer can be very large, so, output answer modulo 109+7.

Examples:

Input: 
n = 6, arr = [5, 2, 3, 10, 6, 8], sum = 10
Output: 
3
Explanation: 
{5, 2, 3}, {2, 8}, {10} are possible subsets.
Input: 
n = 5, arr = [2, 5, 1, 4, 3], sum = 10
Output: 
3
Explanation: 
{2, 1, 4, 3}, {5, 1, 4}, {2, 5, 3} are possible subsets.

Expected Time Complexity: O(n*sum)
Expected Auxiliary Space: O(n*sum)

Constraints:
1 ≤ n*sum ≤ 106
0 ≤ arr[i] ≤ 106



================================OUTPUT==========================================

class Solution{

	public int perfectSum(int arr[],int n, int sum) 
	{ 
	    // Your code goes here
	    int [][] subarraysum = new int [n+1][sum+1];
	    int mod=1000000007;
	    for(int i=0;i<=n;i++)
	    {
	        subarraysum[i][0]=1;
	    }
	    
	    for(int i=1;i<=n;i++)
	    {
	        for(int j=0;j<=sum;j++)
	        {
	            subarraysum[i][j]=subarraysum[i-1][j];
	            if (j >= arr[i-1]) 
	            {
                    subarraysum[i][j] = (subarraysum[i][j] + subarraysum[i-1][j - arr[i-1]]) % mod;
                }
	        }
	    }
	    return subarraysum[n][sum];
	} 
}