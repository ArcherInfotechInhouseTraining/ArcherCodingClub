Given an array arr. Find the majority element in the array. If no majority exists, return -1.

A majority element in an array is an element that appears strictly more than arr.size()/2 times in the array.

Examples:

Input: arr[] = [3, 1, 3, 3, 2]
Output: 3
Explanation: Since, 3 is present more than n/2 times, so it is the majority element.
Input: arr[] = [7]
Output: 7
Explanation: Since, 7 is single element and present more than n/2 times, so it is the majority element.
Input: arr[] = [2, 13]
Output: -1
Explanation: Since, no element is present more than n/2 times, so there is no majority element.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ arr.size() ≤ 105
0 ≤ arr[i]≤ 105


=====================================OUTPUT===============================================


class Solution {
  public:
    int majorityElement(vector<int>& arr) {

        int nums=0;
        int cnt=0;
        int result=arr.size()/2;
        for(int i=0;i<arr.size();i++)
        {
            if(cnt==0)
            {
                nums=arr[i];
                cnt=1;
            }
            else if(arr[i]==nums)  
            {
                cnt++;
            }
            else
            {
                cnt--;
            }
    
        }
        cnt = 0;
        for (int i = 0; i < arr.size(); i++)
        {
            if (arr[i] == nums)
            {
                cnt++;
            }
        }
        
        if(cnt>result)
        {
            return nums;
        }
        return -1;
        
    }
};