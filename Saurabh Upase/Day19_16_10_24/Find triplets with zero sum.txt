Given an array arr[] of n integers. Check whether it contains a triplet that sums up to zero. Return true, if there is at least one triplet following the condition else return false.

Examples:

Input: n = 5, arr[] = {0, -1, 2, -3, 1}
Output: 1
Explanation: 0, -1, and 1 form a triplet with a sum equal to 0.
Input: n = 3, arr[] = {1, 2, 3}
Output: 0
Explanation: No triplet with zero sum exists. 
Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(1)

Constraints:
1 <= n <= 104
-106 <= arr[i] <= 106


=========================OUTPUT====================================


class Solution{
  public:
    //Function to find triplets with zero sum.
    bool findTriplets(int arr[], int n)
    { 
        sort(arr, arr+n);
        
        for(int i=0;i<n-2;i++)
        {
           int j=i+1;
           int k=n-1;
           while(j<k)
           {
               if(arr[i]+arr[j]+arr[k]==0)
               {
                    return true;
               }
               else if(arr[i]+arr[j]+arr[k]<0)
               {
                    j++;
               }
               else
               {
                   k--;
               }
           }
           
        }
        return false;
    }
};