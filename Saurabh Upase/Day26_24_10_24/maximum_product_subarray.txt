Given an array arr[] that contains positive and negative integers (may contain 0 as well). Find the maximum product that we can get in a subarray of arr.

Note: It is guaranteed that the output fits in a 64-bit integer.

Examples

Input: arr[] = [6, -3, -10, 0, 2]
Output: 180
Explanation:  The subarray [6, -3, -10] gives max product as 180.
Input: arr[] = [2, 3, 4, 5, -1, 0]
Output: 120
Explanation: The subarray [2, 3, 4, 5] gives max product as 120.
Input: arr[] = [2, 3, 4]
Output: 24
Explanation: For an array with all positive elements, the result is product of all elements.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ arr.size() ≤ 500
-102 ≤ arr[i] ≤ 102


=======================OUTPUT===============================

class Solution {
    // Function to find maximum product subarray
    long maxProduct(int[] arr) {
        // code here
        int n=arr.length;
        long max=arr[0];
        
        for(int i=0;i<n;i++)
        {
            int j=i;
            long product=1;
            while(j<n)
            {
                product*=arr[j];
                if(max<product)
                {
                    max=product;
                }
                j++;
            }
        }
        return max;
    }
}